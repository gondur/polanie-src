/**************************************************************************
*** Plik  : OPERWAV.CPP                                                 ***
*** Autor : Artur Bidzinski                                             ***
*** Data  : 28 pazdziernika 1995r.                                      ***
***************************************************************************
*** Opis  : Plik definicyjny klase operujaca na strukturze WAV          ***
**************************************************************************/
#include <fcntl.h>   //open
#include <io.h>      //read(), close()
#include <dos.h>     //FP_SEG, FP_OFF
#include <string.h>  //strcpy()
#include <malloc.h>  //malloc()
#include <stdio.h>  //FILE

#include <conio.h>  //malloc()

#include "define.h"
#include "operwav.h"


//word OPERWAV::Segment_Okna_EMS = 0;

/*void OPERWAV::NAJBARDZIEJ_KRETYNSKA_FUNKCJA_ZAMIAST_KONSTRUKTORA(void)
{
// strncpy(nazwa,"NONAME.",DLUGOSC_NAZWY_PLIKU);
// jest_grany = 0;
/// UchEMS     = 0;
// dlug       = 0;
// dlug_ostatniej_strony = 0;
// zajety     = 0;
} */

/*OPERWAV::OPERWAV(void)
{
    NAJBARDZIEJ_KRETYNSKA_FUNKCJA_ZAMIAST_KONSTRUKTORA();
}

OPERWAV::~OPERWAV(void)
{
 word identyfikator;
 if(zajety)
  Zwolnij_pamiec_EMS();
} */

int OPERWAV::ZaladujWAV_z_dysku(char *nazwa_pliku,opisWAVa *wav)
{
//    read
 //   open close
   // ifstream plikWAV;
    int rez;
    int handle;
    FILE*f;
    f=fopen(nazwa_pliku,"rb");
    if(!f)return BRAK_PLIKU_WAV;
    fread(&naglowek,(unsigned)sizeof(WAV),1,f); 
    rez = Naglowek_WAV_poprawny();
    if(rez){fclose(f); return rez;}
    rez = Rezerwuj_pamiec_na_probki(wav);
    if(rez){fclose(f); return rez;}
    fread(wav->samples,wav->size,1,f);//czytaj probki 
    fclose(f);
    wav->zajety = ZWYKLE_ZALADOWANIE_WAVA;
//  #define GLOBALNE_ZALADOWANIE_WAVOW 2
    return WAV_ZALADOWANY;

    //handle=open(nazwa_pliku,O_RDONLY|O_BINARY);

    /*plikWAV.open(nazwa_pliku,ios::binary);
    if(!(plikWAV.good()))
      plik_otwarty = 1;
    else
      return BRAK_PLIKU_WAV;   //Brak wskazanego pliku;*/

    /*if(handle==(-1))
    {
        
        return BRAK_PLIKU_WAV;
    }

    rez = Czytaj_naglowek_WAV(handle);
   
    if(!rez)
     rez = Naglowek_WAV_poprawny();

    if(!rez)
     rez = Rezerwuj_pamiec_na_probki(wav);

    if(rez) //Gdy przydzial sie nie powiodl
    {
        close(handle);
        return rez;
    }
   
    rez = Czytaj_probki_do_bufora(handle,wav);
   
    close(handle);      //Zamkniej plik
   
    if(rez) //Jesli czyatanie probek sie nie powiodlo
    {
        wav->ZwolnijUchwyt();
        return rez;
    }
    return WAV_ZALADOWANY;*/
}

int OPERWAV::Czytaj_naglowek_WAV(int handle)
{
    int size_read=read(handle,(void*)&naglowek,(unsigned)sizeof(WAV));

    if(size_read<(int)sizeof(WAV))
    {
        return ZA_KROTKI_NAGLOWEK_WAV;
    }
    return 0;
}


////////////////////////////////////////////////////////////////
// Zwraca 0 gdy wszysktko OK i wtedy w size_chunk_data
//          znajduje sie ilosc bajtow w kromce 'data'
// wartosc rozna od 0 w przypadku bledu naglowka pliku .wav
////////////////////////////////////////////////////////////////
int OPERWAV::Naglowek_WAV_poprawny(void)
{
    int rez = 0;
    char *bajt = (char*)&naglowek;
    
    rez = strncmp((char*)bajt,"RIFF",4);
    if(!rez)
        rez = strncmp((char*)bajt+0x08,"WAVE",4);
    if(!rez)
        rez = strncmp((char*)bajt+0x0C,"fmt ",4);
    if(!rez)
        rez = strncmp((char*)bajt+0x24,"data",4);
    if(!rez)
        rez = !naglowek.nSamplesPerSec; //Czy czestotliwosc <> zera
    if(!rez)
    {
        rez = !naglowek.size_chunk_data; //Dlugosc kromki 'data'
    }

    if(rez)
    {
        return BLEDNY_NAGLOWEK_WAV;
    }

    return rez;    //Czyli zero - NAGLOWEK POPRAWNY;
}



////////////////////////////////////////////////////////////////
//
//               POPRAWIC !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//
// Zwraca 0 gdy wszysktko OK i wtedy w size_chunk_data
//          znajduje sie ilosc bajtow w kromce 'data'
// wartosc rozna od 0 w przypadku bledu naglowka pliku .wav
////////////////////////////////////////////////////////////////
/*int OPERWAV::Zwolnij_pamiec(int identyfikator)
{
    //Artur tu pracuj
   return BLAD_PRZY_ZWALNIANIU_PAMIECI_EMS; Zwolniono_pamiec_EMS:

   //opis.Init_opisWAVa();
   return 0;
}*/

int OPERWAV::Rezerwuj_pamiec_na_probki(opisWAVa *wav)
//Rezerwuj_pamiec_na_probki(opisWAWa *wav)
{
    if(!(naglowek.size_chunk_data))
    {
        return PROBA_PRZYDZIALU_BLOKU_O_ZERO_STRONACH;
    }
    
    wav->samples = malloc((size_t)naglowek.size_chunk_data);

    if(wav->samples)
    {
        wav->size = naglowek.size_chunk_data;
        wav->zajety = 1;
        return 0; //Pamiec zarezerwowana;    //probki = //(char*) farmalloc(naglowek.ile_po_data); //new char [naglowek.ile_po_data];
    }

    return BRAK_PAMIECI_EMS;
}

/* int OPERWAV::Czytaj_probki_do_bufora(ifstream *plikWAV,
                      word     wolna_strona_fizyczna,
                      word     identyfikator)*/
int OPERWAV::Czytaj_probki_do_bufora(int handle, opisWAVa *wav)
{
   int ReadSizeData;
   int step = 32000;
   int TotalSizeData = (wav->size);
   char *buffer=(char*)(wav->samples);


   if(TotalSizeData<step)
   {
       step = TotalSizeData;
   }

     do
     {
      ReadSizeData=read(handle,(void*)buffer,step);
      if(ReadSizeData!=step)
      {
          return NIEODCZYTANE_PROBKI;//i co teraz ? Nie wiem
      }

      TotalSizeData -= ReadSizeData;
      if(!TotalSizeData)
      {
          return 0;
      }else
      {
          buffer += ReadSizeData;           //Aby czytac w odpowiednie miejsce
          if(TotalSizeData<step)
          {
             step = TotalSizeData;
          }
      }
    }while(TotalSizeData>0);
   return 0;
}

/*void OPERWAV::Inicjuj_daneDMA(void)
{
 long adres_liniowy_poczatku_danych;
 long adres_liniowy_konca_danych;
 byte Ppoczatku;
 byte Pkonca;

 //adres_liniowy_poczatku_danych = (((long)FP_SEG(probki))<<4) + (long)FP_OFF(probki);
 adres_liniowy_poczatku_danych = ((long)probki)<<4;
 adres_liniowy_konca_danych = adres_liniowy_poczatku_danych + naglowek.ile_po_data - 1;
 Ppoczatku = (byte) (adres_liniowy_poczatku_danych>>16);
 Pkonca    = (byte) (adres_liniowy_konca_danych>>16);

 int aa234=naglowek.nSamplesPerSec;
 cz1.Czestotliwosc = (byte)(256 -(1000000/aa234));
 cz2.Czestotliwosc = cz1.Czestotliwosc;

 if(Ppoczatku == Pkonca)
 {
  cz1.ostatni = 1;
  cz1.P = Ppoczatku;
  cz1.XXYY.ofset_dma   = (word) (adres_liniowy_poczatku_danych & 0x0000FFFF);
  cz1.VVZZ.dlugosc_dma = (word) naglowek.ile_po_data;
 }
 else
 {
  cz1.ostatni = 0;
  cz2.ostatni = 1;
  cz1.P = Ppoczatku;
  cz2.P = Pkonca;

  cz1.XXYY.ofset_dma = (word) (adres_liniowy_poczatku_danych & 0x0000FFFF);
  cz2.XXYY.ofset_dma = 0;

  //Ha no wlasnie - co teraz?
  cz1.VVZZ.dlugosc_dma = (word) ((adres_liniowy_konca_danych & 0xFFFF0000) - adres_liniowy_poczatku_danych - 1);
  cz2.VVZZ.dlugosc_dma = (word) (adres_liniowy_konca_danych & 0x0000FFFF) + 1;
 }
} */

/*word OPERWAV::Zwolnij_uchwyt(void)
{
 word BLAD_ZWOLNIENIA_PAMIECI;



 BLAD_ZWOLNIENIA_PAMIECI = Zwolnij_pamiec_EMS();

 if(BLAD_ZWOLNIENIA_PAMIECI)
  return BLAD_ZWOLNIENIA_PAMIECI;

 NAJBARDZIEJ_KRETYNSKA_FUNKCJA_ZAMIAST_KONSTRUKTORA();  //Przywrocenie stanu poczatkowego
 return 0;
} */

/*word OPERWAV::Czy_mozna_odtwarzac_WAV(void)
{
 if(!zajety)    return PROBA_ODTWORZENIA_UCHWYTU_NULL;
 if(jest_grany) return PROBA_ODTWORZENIA_UCHWYTU_OBECNIE_ODTWARZANEGO;
 return 0;
}

char *OPERWAV::tytul(void) { return nazwa; }*/
