#if !defined(__MOVER_H)
#define __MOVER_H

#define mMaxX 66
#define mMaxY 66
#define MaxUnitsInCastle 40
#define MaxPictures 284

//////// definicje kolorow /////////////////
#define Color1 38

#define LightRed 132
#define Red 38
#define DarkRed 31

#define LightYellow 211
#define Yellow 189
#define DarkYellow 187

#define LightGreen 175
#define Green 67
#define DarkGreen 15

#define LightBlue 215
#define Blue 213
#define DarkBlue 212

#define LightGray 181
#define Gray 118
#define DarkGray 30

#define LightBrown 49
#define Brown 42
#define DarkBrown 10

#define Black 0
#define White 255
#define FontColor 181
#define MsgFontColor 255
///////////////////////////////////////////////////////////
struct MMessage
{
    int licznik,count;
    int X,x;
    int Y,y;
    int dzwiek;
    char msg[40];
};
#endif


//-----------------------------------------------
class Missile
{
        public:
        int x,y,xt,yt;
        int dx,dy;
        char type;
        char *view;
        char visible;
        char exist;
        char damage;
        void Init(int,int,int,int,int,int);
        void Move();
        void Show(int,int);
};
//----------------------------------------------
class Mover1
{
public:
int xr,yr;
char wybrany;
int nr;         //nr bity 0-7 nr bity 8-9 IFF bity 10-15 typ
int hp,maxhp;
int mainTarget;
int visible;
int command,commandN;   // 0-nic 1-go 2-fight
int type;    //0-krowa 1-miecz 2-luk 3-mag
class Missile missile;

Mover1(void);
~Mover1(void);
void Move(void);
void Show(void);
void Hide(void);
void SetEnd(int,int);
void SetStart(int,int);
void Prepare(int,int,int);
void ShowS(void);
void Disable();
void Repare(void);
void SetNr(int);
void SetIFF(int);
void Init(int,int,int,int,int);
void SetCommand(int);
void SetTarget(int);
void Run(void);
int Milk(void);
int OK(void){return exist;};



void FindGrass();
void Labeling(void);
void Run1(void);
void Run2(void);
int LookAround(void);
int LokateTarget(void);
void Graze(void);//pasienie sie
void Attack(void);
int Distance(void);

int exist;


int IFF;     // zawsze 1 lub 2
int x,y;
int xe,ye;
int dx,dy;
int phase;   //0-faza ruch  1-faza ruch 2-atak
int faza;
int magic;//100
int xp,yp,xm,ym;
int armour,marmour;
int inmove;
int inattack;
int drange;
int damage;
int udder;
int s_range;
int a_range;
int target;
int ShowHit;
int delay,maxdelay;
int ispath;
int path[6][2];
};
/////////////////////////////////////////////////
struct Command
{
        int co;
        int command;
        int nrb;
        int nrm;
        int x;
        int y;
};
//////////////////////////////////////////////////////
//  class Building
///////////////////////////////////////////////////////

class Building
{
        public:
        int exist;
        int x,y;
        int faza;
        int type;
        int hp;
        int maxhp;
        int food,maxfood;
        int IFF;
        int nr;
        class Mover1 m[6];
        void Prepare(int,int,int);
        void ShowS(int,int,int);
        void Run();
        int Wynik(int);
        int NewMan(int);
        int Milk();
        void Rebuild();
        void Init(int,int,int,int,int);
};
//////////////////////////////////////////////////////
//  class Castle
///////////////////////////////////////////////////////
class Castle
{
        public:
        int IFF;
        int faza;
        int milk,maxmilk;
        class Mover1 m[MaxUnitsInCastle];
        class Building b[20];
        struct Command command;
        void Init(int,int);
        void GetCmd(struct Command *Cmd);
        void SetCmd(struct Command *Cmd);
        void Prepare(int,int,int);
        void ShowS(int,int,int);
        void Run(void);
        void DisableUnits(void);
        void FreeUnits(void);
};


